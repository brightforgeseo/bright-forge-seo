---
import ArticleTemplate from '../../components/ArticleTemplate.astro';
import LegacyHeader from '../../components/LegacyHeader.astro';
import Footer from '../../components/Footer.astro';
import { getBlogPostBySlug, getAllBlogPosts } from '../../lib/contentful';

export async function getStaticPaths() {
  const posts = await getAllBlogPosts();
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { BLOCKS } from '@contentful/rich-text-types';
import { JSDOM } from 'jsdom';

// Get the slug from the URL
const { slug } = Astro.params;

// Fetch the blog post data
const post = await getBlogPostBySlug(slug);

// Handle 404 if the post is not found
if (!post) {
  return Astro.redirect('/404');
}

// Process the content if it exists
let htmlContent = '';
let tableOfContents = [];

if (post.content) {
  // Custom renderer to handle embedded InfographicBlock entries
  const renderOptions = {
    renderNode: {
      [BLOCKS.EMBEDDED_ENTRY]: (node) => {
        const entry = node.data.target;
        
        // Check if this is an InfographicBlock
        if (entry?.sys?.contentType?.sys?.id === 'infographicBlock') {
          const type = entry.fields?.infographicType || 'tabs';
          const title = entry.fields?.title || '';
          const params = entry.fields?.parameters || {};
          
          // Build shortcode string from the embedded entry
          let shortcodeParams = [`type="${type}"`, `title="${title}"`];
          
          // Add any additional parameters from the JSON object
          if (typeof params === 'object' && params !== null) {
            Object.entries(params).forEach(([key, value]) => {
              if (key !== 'type' && key !== 'title') {
                shortcodeParams.push(`${key}="${value}"`);
              }
            });
          }
          
          // Return the shortcode that will be processed by our existing shortcode system
          return `[[INFOGRAPHIC ${shortcodeParams.join(' ')}]]`;
        }
        
        // For other embedded entries, return empty string or default handling
        return '';
      }
    }
  };
  
  // Convert rich text to HTML with custom renderer
  htmlContent = documentToHtmlString(post.content, renderOptions);
  
  // Replace inline shortcodes like [[INFOGRAPHIC type=...]] with interactive HTML we control
  // Force rebuild: timestamp 13:45
  function decodeEntities(s=''){
    return String(s)
      .replace(/&quot;/g, '"')
      .replace(/&apos;/g, "'")
      .replace(/&ldquo;|&rdquo;/g, '"')
      .replace(/&lsquo;|&rsquo;/g, "'")
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>');
  }

  function generateAiBalanceHTML(title = 'AI in Marketing: The Balancing Act') {
    return `
<section class="max-w-4xl mx-auto px-4" aria-labelledby="infographic-title">
  <h3 id="infographic-title" class="text-xl font-semibold text-gray-800 mb-6 text-center">${escapeHtml(decodeEntities(title))}</h3>
  <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-5 sm:p-6">
    <div class="space-y-5">
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Pattern Recognition (AI)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 85%; background: #4285F4" data-target-width="85"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">85</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Strategic Judgment (Human)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 90%; background: #FF6B35" data-target-width="90"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">90</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Scale & Speed (AI)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 95%; background: #6AB7FF" data-target-width="95"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">95</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Context & Empathy (Human)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 88%; background: #FF4438" data-target-width="88"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">88</span>%</div>
        </div>
      </div>
    </div>
    <div class="mt-6 flex flex-wrap gap-2 justify-center">
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="randomize">Randomize</button>
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="reset">Reset</button>
    </div>
  </div>
</section>
<script>(function(){
  var root = document.currentScript.previousElementSibling;
  var bars = root.querySelectorAll('[data-target-width]');
  var initial = Array.prototype.map.call(bars, function(b){ return Number(b.getAttribute('data-target-width')); });
  var valueEls = root.querySelectorAll('.value');
  function setValues(values){ values.forEach(function(v,i){ bars[i].style.width = v + '%'; valueEls[i].textContent = v; }); }
  root.addEventListener('click', function(e){ var btn = e.target.closest('button[data-action]'); if(!btn) return; var a=btn.getAttribute('data-action'); if(a==='randomize'){ var next=initial.map(function(v){ return Math.max(60, Math.min(100, Math.round(v + (Math.random()*20-10))))}); setValues(next);} if(a==='reset'){ setValues(initial);} });
  var obs=new IntersectionObserver(function(entries){ entries.forEach(function(en){ if(en.isIntersecting){ bars.forEach(function(bar,i){ bar.style.width='0%'; requestAnimationFrame(function(){ requestAnimationFrame(function(){ bar.style.width = initial[i] + '%'; });});}); obs.disconnect(); } }); },{threshold:0.2});
  obs.observe(root);
})();</script>`;
  }
  function escapeHtml(s=''){ return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m])); }

  function generateProsConsHTML({ title = 'Pros and Cons', pros = '', cons = '' } = {}) {
    const prosList = String(pros).split(';').map(s => decodeEntities(s).trim()).filter(Boolean);
    const consList = String(cons).split(';').map(s => decodeEntities(s).trim()).filter(Boolean);
    return `
<section class="max-w-4xl mx-auto px-4">
  <h3 class="text-xl font-semibold text-gray-800 mb-6 text-center">${escapeHtml(decodeEntities(title))}</h3>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="rounded-xl border border-green-200 bg-white p-5 shadow-[0_10px_30px_-10px_rgba(16,185,129,0.25)]">
      <h4 class="font-bold text-green-700 mb-3">Pros</h4>
      <ul class="list-disc ml-5 space-y-2 text-gray-800">${prosList.map(li => `<li>${escapeHtml(li)}</li>`).join('')}</ul>
    </div>
    <div class="rounded-xl border border-red-200 bg-white p-5 shadow-[0_10px_30px_-10px_rgba(239,68,68,0.25)]">
      <h4 class="font-bold text-red-700 mb-3">Cons</h4>
      <ul class="list-disc ml-5 space-y-2 text-gray-800">${consList.map(li => `<li>${escapeHtml(li)}</li>`).join('')}</ul>
    </div>
  </div>
</section>`;
  }

  function generateBarsHTML({ title = 'AI vs Human Strengths', items = '' } = {}) {
    const parsed = String(items)
      .split(';')
      .map(s => s.trim())
      .filter(Boolean)
      .map(row => {
        const [label, value, color] = row.split(':');
        const v = Math.max(0, Math.min(100, Number(value || 0)));
        const col = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(String(color||'')) ? color : '#4285F4';
        return { label: decodeEntities(label || 'Item'), value: v, color: col };
      });
    const bars = parsed.map(item => `
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">${escapeHtml(item.label)}</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: ${item.value}% ; background: ${item.color}" data-target-width="${item.value}"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">${item.value}</span>%</div>
        </div>
      </div>`).join('');
    return `
<section class="max-w-4xl mx-auto px-4" aria-labelledby="bars-title">
  <h3 id="bars-title" class="text-xl font-semibold text-gray-800 mb-6 text-center">${escapeHtml(decodeEntities(title))}</h3>
  <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-5 sm:p-6">
    <div class="space-y-5">${bars}</div>
    <div class="mt-6 flex flex-wrap gap-2 justify-center">
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="randomize">Randomize</button>
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="reset">Reset</button>
    </div>
  </div>
</section>
<script>(function(){
  var root = document.currentScript.previousElementSibling;
  var bars = root.querySelectorAll('[data-target-width]');
  var initial = Array.prototype.map.call(bars, function(b){ return Number(b.getAttribute('data-target-width')); });
  var valueEls = root.querySelectorAll('.value');
  function setValues(values){ values.forEach(function(v,i){ bars[i].style.width = v + '%'; valueEls[i].textContent = v; }); }
  root.addEventListener('click', function(e){ var btn = e.target.closest('button[data-action]'); if(!btn) return; var a=btn.getAttribute('data-action'); if(a==='randomize'){ var next=initial.map(function(v){ return Math.max(0, Math.min(100, Math.round(v + (Math.random()*20-10))))}); setValues(next);} if(a==='reset'){ setValues(initial);} });
  var obs=new IntersectionObserver(function(entries){ entries.forEach(function(en){ if(en.isIntersecting){ bars.forEach(function(bar,i){ bar.style.width='0%'; requestAnimationFrame(function(){ requestAnimationFrame(function(){ bar.style.width = initial[i] + '%'; });});}); obs.disconnect(); } }); },{threshold:0.2});
  obs.observe(root);
})();</script>`;
  }

  // Parse key=value pairs, allowing straight and smart quotes, and clean stray entity quotes
  function parseParams(paramStr = '') {
    const params = {};
    const re = /(\w+)=\s*("[^"]*"|“[^”]*”|'[^']*'|‘[^’]*’|[^\s\]]+)/g;
    const stripWrappingQuotes = (v) => {
      if (!v) return v;
      v = v.trim();
      const pairs = [
        ['"','"'],
        ["'","'"],
        ['“','”'],
        ['‘','’'],
      ];
      for (const [l, r] of pairs) {
        if (v.startsWith(l) && v.endsWith(r)) return v.slice(1, -1);
      }
      // Also strip common HTML entity quotes if present at edges
      v = v.replace(/^&quot;|^&ldquo;|^&lsquo;/, '');
      v = v.replace(/&quot;$|&rdquo;$|&rsquo;$/, '');
      return v;
    };
    let m;
    while ((m = re.exec(paramStr)) !== null) {
      const key = m[1];
      let val = stripWrappingQuotes(m[2]);
      params[key] = val;
    }
    return params;
  }

  function generateTabsHTML({ title = 'AI in Marketing: The Balancing Act' } = {}) {
    return `
<section class="max-w-7xl mx-auto px-4">
  <h2 class="text-center text-2xl md:text-3xl font-bold text-gray-900 mb-6 md:mb-8">${escapeHtml(decodeEntities(title))}</h2>

  <!-- Pill Tab Navigation -->
  <div role="tablist" aria-label="Infographic topics" class="flex flex-wrap justify-center gap-3 md:gap-4 overflow-x-auto md:overflow-visible pb-2 md:pb-0 mb-8 no-scrollbar">
    <button id="tab-bright" role="tab" aria-selected="true" aria-controls="panel-bright" data-tab="bright"
      class="tab-trigger inline-flex items-center gap-2 whitespace-nowrap rounded-full border px-4 py-2 text-sm md:text-base transition-all duration-200
             bg-white border-red-200 text-red-700 shadow-[0_6px_18px_-8px_rgba(239,68,68,0.35)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2">
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
      <span class="font-semibold">The Bright Side</span>
    </button>
    <button id="tab-dark" role="tab" aria-selected="false" aria-controls="panel-dark" data-tab="dark"
      class="tab-trigger inline-flex items-center gap-2 whitespace-nowrap rounded-full border px-4 py-2 text-sm md:text-base transition-all duration-200
             bg-white border-gray-200 text-gray-700 hover:border-red-300 hover:text-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2">
      <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>
      <span class="font-semibold">The Dark Side</span>
    </button>
    <button id="tab-eeat" role="tab" aria-selected="false" aria-controls="panel-eeat" data-tab="eeat"
      class="tab-trigger inline-flex items-center gap-2 whitespace-nowrap rounded-full border px-4 py-2 text-sm md:text-base transition-all duration-200
             bg-white border-gray-200 text-gray-700 hover:border-red-300 hover:text-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2">
      <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path></svg>
      <span class="font-semibold">The E-E-A-T Framework</span>
    </button>
    <button id="tab-future" role="tab" aria-selected="false" aria-controls="panel-future" data-tab="future"
      class="tab-trigger inline-flex items-center gap-2 whitespace-nowrap rounded-full border px-4 py-2 text-sm md:text-base transition-all duration-200
             bg-white border-gray-200 text-gray-700 hover:border-red-300 hover:text-red-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-red-400 focus-visible:ring-offset-2">
      <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>
      <span class="font-semibold">Future-Proofing</span>
    </button>
  </div>

  <!-- Content Panel -->
  <div class="rounded-2xl ring-1 ring-red-100 bg-white shadow-[0_18px_36px_-18px_rgba(239,68,68,0.25)]">
    <div class="p-6 md:p-8">
      <section id="panel-bright" role="tabpanel" aria-labelledby="tab-bright" tabindex="0" class="tab-panel" data-panel="bright">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path></svg>
          <h3 class="text-xl font-bold text-gray-900">The Bright Side</h3>
        </div>
        <ul class="space-y-3 text-gray-800 leading-relaxed">
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Efficiency: AI drafts blogs in minutes instead of hours</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Scalability: Create content at a fraction of the cost</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Data Power: Analyse competitor strategies with ease</span></li>
        </ul>
      </section>

      <section id="panel-dark" role="tabpanel" aria-labelledby="tab-dark" tabindex="0" class="tab-panel hidden" data-panel="dark">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>
          <h3 class="text-xl font-bold text-gray-900">The Dark Side</h3>
        </div>
        <ul class="space-y-3 text-gray-800 leading-relaxed">
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Hallucinations: AI can state incorrect facts confidently</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Lack of Soul: Content often lacks originality and emotion</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Risk: Can damage brand credibility if unchecked</span></li>
        </ul>
      </section>

      <section id="panel-eeat" role="tabpanel" aria-labelledby="tab-eeat" tabindex="0" class="tab-panel hidden" data-panel="eeat">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path></svg>
          <h3 class="text-xl font-bold text-gray-900">The E-E-A-T Framework</h3>
        </div>
        <ul class="space-y-3 text-gray-800 leading-relaxed">
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Experience: First-hand knowledge adds real value</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Expertise: Demonstrates authority in your field</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Authoritativeness: Builds recognition and trust</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Trustworthiness: Ensures content accuracy and honesty</span></li>
        </ul>
      </section>

      <section id="panel-future" role="tabpanel" aria-labelledby="tab-future" tabindex="0" class="tab-panel hidden" data-panel="future">
        <div class="flex items-center gap-3 mb-4">
          <svg class="w-6 h-6 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path></svg>
          <h3 class="text-xl font-bold text-gray-900">Future-Proofing</h3>
        </div>
        <ul class="space-y-3 text-gray-800 leading-relaxed">
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Google SGE: Optimise for AI-powered search answers</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Hyper-Personalisation: Tailor content to user behaviour</span></li>
          <li class="flex items-start gap-3"><span class="mt-2 h-2 w-2 rounded-full bg-red-500"></span><span>Balance: Use AI to amplify—not replace—human expertise</span></li>
        </ul>
      </section>
    </div>
  </div>
</section>
<script>(function(){
  var root = document.currentScript.previousElementSibling;
  var triggers = root.querySelectorAll('.tab-trigger');
  var panels = root.querySelectorAll('.tab-panel');

  function activate(target){
    triggers.forEach(function(btn){
      var isActive = btn.getAttribute('data-tab') === target;
      btn.setAttribute('aria-selected', isActive ? 'true' : 'false');
      btn.classList.toggle('border-red-200', isActive);
      btn.classList.toggle('text-red-700', isActive);
      btn.classList.toggle('shadow-[0_6px_18px_-8px_rgba(239,68,68,0.35)]', isActive);
      btn.classList.toggle('border-gray-200', !isActive);
      btn.classList.toggle('text-gray-700', !isActive);
    });

    panels.forEach(function(panel){
      var show = panel.getAttribute('data-panel') === target;
      panel.classList.toggle('hidden', !show);
    });
  }

  // Click
  triggers.forEach(function(btn){
    btn.addEventListener('click', function(){ activate(btn.getAttribute('data-tab')); });
    // Keyboard: left/right to switch
    btn.addEventListener('keydown', function(e){
      if(e.key !== 'ArrowRight' && e.key !== 'ArrowLeft') return;
      var list = Array.prototype.slice.call(triggers);
      var i = list.indexOf(btn);
      var next = e.key === 'ArrowRight' ? (i+1) % list.length : (i-1+list.length) % list.length;
      list[next].focus();
      activate(list[next].getAttribute('data-tab'));
    });
  });

  // Initial
  activate('bright');
})();</script>`;
  }

  function replaceShortcodes(inputHtml) {
    const re = /\[\[INFOGRAPHIC(?:\s+([^\]]+))?\]\]/g;
    return inputHtml.replace(re, (_match, paramStr) => {
      const params = parseParams(paramStr || '');
      const type = (params.type || 'tabs').toLowerCase();
      if (type === 'tabs') return generateTabsHTML(params);
      if (type === 'ai-balance') return generateAiBalanceHTML(params.title);
      if (type === 'pros-cons') return generateProsConsHTML(params);
      if (type === 'bars') return generateBarsHTML(params);
      // fallback
      return generateTabsHTML(params);
    })
    // Also allow HTML comment marker as a basic fallback
    .replace(/<!--\s*INFOGRAPHIC\s*-->/g, generateTabsHTML());
  }
  
  htmlContent = replaceShortcodes(htmlContent);
  
  // Generate table of contents from HTML headings
  const dom = new JSDOM(htmlContent);
  const headings = [...dom.window.document.querySelectorAll('h2, h3')];
  
  tableOfContents = headings.map(heading => {
    const text = heading.textContent;
    const id = text
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '-');
    
    // Add ID to the heading in the HTML
    heading.id = id;
    
    return {
      id,
      title: text,
      level: parseInt(heading.tagName.substring(1), 10)
    };
  });
  
  // Update the HTML content with IDs
  htmlContent = dom.window.document.body.innerHTML;
}

// Format the publish date
const formattedDate = post.publishDate ? 
  new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(post.publishDate) : 
  '';

// Prepare ArticleTemplate props
const templateProps = {
  title: post.title,
  excerpt: post.excerpt || '',
  author: {
    name: post.author || 'BrightForge Team',
    bio: 'Digital marketing experts specializing in SEO and content strategy.',
    avatar: '',
    linkedin: ''
  },
  publishDate: formattedDate,
  readTime: '5 min read', // You could calculate this based on content length
  category: 'SEO & Marketing',
  tags: post.tags || [],
  featuredImage: post.featuredImage,
  content: htmlContent,
  tableOfContents: tableOfContents,
  showInfographic: post.showInfographic === true
};
---

<ArticleTemplate {...templateProps}>
  <LegacyHeader slot="header" />
  <Footer slot="footer" />
</ArticleTemplate>
