---
import ArticleTemplate from '../../components/ArticleTemplate.astro';
import LegacyHeader from '../../components/LegacyHeader.astro';
import Footer from '../../components/Footer.astro';
import { getBlogPostBySlug, getAllBlogPosts } from '../../lib/contentful';

export async function getStaticPaths() {
  const posts = await getAllBlogPosts();
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

import { documentToHtmlString } from '@contentful/rich-text-html-renderer';
import { JSDOM } from 'jsdom';

// Get the slug from the URL
const { slug } = Astro.params;

// Fetch the blog post data
const post = await getBlogPostBySlug(slug);

// Handle 404 if the post is not found
if (!post) {
  return Astro.redirect('/404');
}

// Process the content if it exists
let htmlContent = '';
let tableOfContents = [];

if (post.content) {
  // Convert rich text to HTML
  htmlContent = documentToHtmlString(post.content);
  
  // Replace inline shortcodes like [[INFOGRAPHIC type=...]] with interactive HTML we control
  function generateAiBalanceHTML(title = 'AI in Marketing: The Balancing Act') {
    return `
<section class="max-w-4xl mx-auto px-4" aria-labelledby="infographic-title">
  <h3 id="infographic-title" class="text-xl font-semibold text-gray-800 mb-6 text-center">${title}</h3>
  <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-5 sm:p-6">
    <div class="space-y-5">
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Pattern Recognition (AI)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 85%; background: #4285F4" data-target-width="85"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">85</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Strategic Judgment (Human)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 90%; background: #FF6B35" data-target-width="90"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">90</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Scale & Speed (AI)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 95%; background: #6AB7FF" data-target-width="95"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">95</span>%</div>
        </div>
      </div>
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">Context & Empathy (Human)</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: 88%; background: #FF4438" data-target-width="88"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">88</span>%</div>
        </div>
      </div>
    </div>
    <div class="mt-6 flex flex-wrap gap-2 justify-center">
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="randomize">Randomize</button>
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="reset">Reset</button>
    </div>
  </div>
</section>
<script>(function(){
  var root = document.currentScript.previousElementSibling;
  var bars = root.querySelectorAll('[data-target-width]');
  var initial = Array.prototype.map.call(bars, function(b){ return Number(b.getAttribute('data-target-width')); });
  var valueEls = root.querySelectorAll('.value');
  function setValues(values){ values.forEach(function(v,i){ bars[i].style.width = v + '%'; valueEls[i].textContent = v; }); }
  root.addEventListener('click', function(e){ var btn = e.target.closest('button[data-action]'); if(!btn) return; var a=btn.getAttribute('data-action'); if(a==='randomize'){ var next=initial.map(function(v){ return Math.max(60, Math.min(100, Math.round(v + (Math.random()*20-10))))}); setValues(next);} if(a==='reset'){ setValues(initial);} });
  var obs=new IntersectionObserver(function(entries){ entries.forEach(function(en){ if(en.isIntersecting){ bars.forEach(function(bar,i){ bar.style.width='0%'; requestAnimationFrame(function(){ requestAnimationFrame(function(){ bar.style.width = initial[i] + '%'; });});}); obs.disconnect(); } }); },{threshold:0.2});
  obs.observe(root);
})();</script>`;
  }
  function escapeHtml(s=''){ return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[m])); }

  function generateProsConsHTML({ title = 'Pros and Cons', pros = '', cons = '' } = {}) {
    const prosList = String(pros).split(';').map(s => s.trim()).filter(Boolean);
    const consList = String(cons).split(';').map(s => s.trim()).filter(Boolean);
    return `
<section class="max-w-4xl mx-auto px-4">
  <h3 class="text-xl font-semibold text-gray-800 mb-6 text-center">${escapeHtml(title)}</h3>
  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
    <div class="rounded-xl border border-green-200 bg-white p-5 shadow-[0_10px_30px_-10px_rgba(16,185,129,0.25)]">
      <h4 class="font-bold text-green-700 mb-3">Pros</h4>
      <ul class="list-disc ml-5 space-y-2 text-gray-800">${prosList.map(li => `<li>${escapeHtml(li)}</li>`).join('')}</ul>
    </div>
    <div class="rounded-xl border border-red-200 bg-white p-5 shadow-[0_10px_30px_-10px_rgba(239,68,68,0.25)]">
      <h4 class="font-bold text-red-700 mb-3">Cons</h4>
      <ul class="list-disc ml-5 space-y-2 text-gray-800">${consList.map(li => `<li>${escapeHtml(li)}</li>`).join('')}</ul>
    </div>
  </div>
</section>`;
  }

  function generateBarsHTML({ title = 'AI vs Human Strengths', items = '' } = {}) {
    const parsed = String(items)
      .split(';')
      .map(s => s.trim())
      .filter(Boolean)
      .map(row => {
        const [label, value, color] = row.split(':');
        const v = Math.max(0, Math.min(100, Number(value || 0)));
        const col = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i.test(String(color||'')) ? color : '#4285F4';
        return { label: label || 'Item', value: v, color: col };
      });
    const bars = parsed.map(item => `
      <div class="grid grid-cols-1 sm:grid-cols-5 gap-3 items-center">
        <div class="sm:col-span-2 text-sm font-medium text-gray-700">${escapeHtml(item.label)}</div>
        <div class="sm:col-span-3">
          <div class="h-3 w-full bg-gray-100 rounded-full overflow-hidden">
            <div class="h-full rounded-full transition-all duration-500 will-change-transform" style="width: ${item.value}% ; background: ${item.color}" data-target-width="${item.value}"></div>
          </div>
          <div class="mt-1 text-xs text-gray-500"><span class="value">${item.value}</span>%</div>
        </div>
      </div>`).join('');
    return `
<section class="max-w-4xl mx-auto px-4" aria-labelledby="bars-title">
  <h3 id="bars-title" class="text-xl font-semibold text-gray-800 mb-6 text-center">${escapeHtml(title)}</h3>
  <div class="bg-white rounded-xl shadow-lg border border-gray-100 p-5 sm:p-6">
    <div class="space-y-5">${bars}</div>
    <div class="mt-6 flex flex-wrap gap-2 justify-center">
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="randomize">Randomize</button>
      <button class="px-3 py-1.5 text-xs rounded-full bg-gray-100 hover:bg-gray-200 text-gray-700 transition" data-action="reset">Reset</button>
    </div>
  </div>
</section>
<script>(function(){
  var root = document.currentScript.previousElementSibling;
  var bars = root.querySelectorAll('[data-target-width]');
  var initial = Array.prototype.map.call(bars, function(b){ return Number(b.getAttribute('data-target-width')); });
  var valueEls = root.querySelectorAll('.value');
  function setValues(values){ values.forEach(function(v,i){ bars[i].style.width = v + '%'; valueEls[i].textContent = v; }); }
  root.addEventListener('click', function(e){ var btn = e.target.closest('button[data-action]'); if(!btn) return; var a=btn.getAttribute('data-action'); if(a==='randomize'){ var next=initial.map(function(v){ return Math.max(0, Math.min(100, Math.round(v + (Math.random()*20-10))))}); setValues(next);} if(a==='reset'){ setValues(initial);} });
  var obs=new IntersectionObserver(function(entries){ entries.forEach(function(en){ if(en.isIntersecting){ bars.forEach(function(bar,i){ bar.style.width='0%'; requestAnimationFrame(function(){ requestAnimationFrame(function(){ bar.style.width = initial[i] + '%'; });});}); obs.disconnect(); } }); },{threshold:0.2});
  obs.observe(root);
})();</script>`;
  }

  // Parse key=value pairs, allowing quoted values
  function parseParams(paramStr = '') {
    const params = {};
    const re = /(\w+)=\s*("[^"]*"|'[^']*'|[^\s\]]+)/g;
    let m;
    while ((m = re.exec(paramStr)) !== null) {
      const key = m[1];
      let val = m[2];
      if ((val.startsWith('"') && val.endsWith('"')) || (val.startsWith("'") && val.endsWith("'"))) {
        val = val.slice(1, -1);
      }
      params[key] = val;
    }
    return params;
  }

  function replaceShortcodes(inputHtml) {
    const re = /\[\[INFOGRAPHIC(?:\s+([^\]]+))?\]\]/g;
    return inputHtml.replace(re, (_match, paramStr) => {
      const params = parseParams(paramStr || '');
      const type = (params.type || 'ai-balance').toLowerCase();
      if (type === 'ai-balance') return generateAiBalanceHTML(params.title);
      if (type === 'pros-cons') return generateProsConsHTML(params);
      if (type === 'bars') return generateBarsHTML(params);
      // fallback
      return generateAiBalanceHTML(params.title);
    })
    // Also allow HTML comment marker as a basic fallback
    .replace(/<!--\s*INFOGRAPHIC\s*-->/g, generateAiBalanceHTML());
  }
  
  htmlContent = replaceShortcodes(htmlContent);
  
  // Generate table of contents from HTML headings
  const dom = new JSDOM(htmlContent);
  const headings = [...dom.window.document.querySelectorAll('h2, h3')];
  
  tableOfContents = headings.map(heading => {
    const text = heading.textContent;
    const id = text
      .toLowerCase()
      .replace(/[^\w\s]/g, '')
      .replace(/\s+/g, '-');
    
    // Add ID to the heading in the HTML
    heading.id = id;
    
    return {
      id,
      title: text,
      level: parseInt(heading.tagName.substring(1), 10)
    };
  });
  
  // Update the HTML content with IDs
  htmlContent = dom.window.document.body.innerHTML;
}

// Format the publish date
const formattedDate = post.publishDate ? 
  new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'long', day: 'numeric' }).format(post.publishDate) : 
  '';

// Prepare ArticleTemplate props
const templateProps = {
  title: post.title,
  excerpt: post.excerpt || '',
  author: {
    name: post.author || 'BrightForge Team',
    bio: 'Digital marketing experts specializing in SEO and content strategy.',
    avatar: '',
    linkedin: ''
  },
  publishDate: formattedDate,
  readTime: '5 min read', // You could calculate this based on content length
  category: 'SEO & Marketing',
  tags: post.tags || [],
  featuredImage: post.featuredImage,
  content: htmlContent,
  tableOfContents: tableOfContents,
  showInfographic: post.showInfographic === true
};
---

<ArticleTemplate {...templateProps}>
  <LegacyHeader slot="header" />
  <Footer slot="footer" />
</ArticleTemplate>
